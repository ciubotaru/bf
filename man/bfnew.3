.TH bfnew 3 "SEPTEMBER 1, 2015" "bitfield 0.1" "Bitfield manipulation library"
.SH NAME
bfnew, bfdel \- create and delete bitfields.
.SH SYNOPSIS
.nf
.B "#include <bitfield.h>
.sp
.BI "struct bitfield *bfnew(const int "size ");
.BI "void bfdel(struct bitfield *"instance ");
.fi
.SH DESCRIPTION
A bitfield is represented by a "struct bitfield". It has two elements: an array of unsigned long integers \fIfield\fR and an integer \fIsize\fR.
.sp
The \fBbfnew()\fR function initializes a bitfield of specified \fIsize\fR (i.e. long enough to host a series of bits of length equal to \fIsize\fR), and returns a pointer to it. This pointer can later be successfully passed to \fBbfdel()\fR. The bitfield is guaranteed to be empty (i.e. contain only zeroes).
.sp
The \fBbfdel()\fR function frees the memory space pointed to by \fIinstance\fR, which must have been returned by a previous call to \fBbfnew()\fR.
.SH EXAMPLES
The following code
.sp
    struct bitfield * mybitfield = bfnew(80);
.sp
will create a bitfield called \fImybitfield\fR with \fIsize\fR equal to 3 and a \fIfield\fR, long enough to host 80 bits. The number of longs in \fIfield\fR depends on \fIsize\fR and machine architecture. On machines with 32-bit longs, that will be 3 longs.
.sp
The following code
.sp
    bfdel(mybitfield);
.sp
will delete the memory taken by a bitfield called \fImybitfield\fR, effectively deleting the bitfield and making it unavailable for subsequent calls.
.SH "SEE ALSO"
.BR bfcmp (3),
.BR bfprint (3),
.BR char2bf (3),
.BR bf2char (3),
.BR bfsub (3),
.BR bfcat (3),
.BR bfshift (3)
.SH AUTHOR
Vitalie CIUBOTARU

