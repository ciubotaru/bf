.TH bitfield 3 "%RELEASE_DATE%" "bitfield %VERSION%" "Bit array manipulation library"
.SH NAME
bitfield \- API for manipulating bit arrays.
.SH DESCRIPTION
A library of functions for creating, modifying and destroying bit arrays, i.e. 
series of zeroes and ones spread across an array of storage units.
.SH DATA TYPES
.B struct bitfield
is a data structure for storing bit arrays. It has two elements: an array of 
unsigned long integers \fIfield\fR for storing the values of bits and an 
unsigned integer \fIsize\fR for storing the number of bits in the array.
.SH EXPORTS
For details of each function, refer to its manual page.
.LP
.LP
Creating and deleting bit arrays:
.LP
.B
bfnew()
.br
.RS
creates an empty bitfield structure, and returns a pointer to it
.RE
.LP
.B
bfnew_ones()
.br
.RS
creates a bitfield structure, sets all its bits and returns a pointer to it
.RE
.LP
.B
bfnew_quick()
.br
.RS
creates a bitfield structure and returns a pointer to it
.RE
.LP
.B
bfdel()
.br
.RS
destroys a bitfield structure and frees memory
.RE
.LP
Operations with bit arrays:
.LP
.B
bfresize()
.br
.RS
resizes an existing bitfield
.RE
.LP
.B
bfcat()
.br
.RS
concatenates several bitfields into one
.RE
.LP
.B
bfclearall()
.br
.RS
clears all bits in a bitfield (i.e. fills it with zeroes)
.RE
.LP
.B
bfclone()
.br
.RS
creates a copy of an existing bitfield
.RE
.LP
.B
bfcpy()
.br
.RS
copies the contents of a bitfield into another pre-existing bitfield
.RE
.LP
.B
bffs()
.br
.RS
finds the first set bit in a bitfield
.RE
.LP
.B
bffz()
.br
.RS
finds the first clear bit in a bitfield
.RE
.LP
.B
bfls()
.br
.RS
finds the last set bit in a bitfield
.RE
.LP
.B
bflz()
.br
.RS
finds the last clear bit in a bitfield
.RE
.LP
.B
bfclo()
.br
.RS
counts leading set bits in a bitfield
.RE
.LP
.B
bfclz()
.br
.RS
counts leading clear bits in a bitfield
.RE
.LP
.B
bfhamming()
.br
.RS
counts the Hamming distance between two bitfields
.RE
.LP
.B
bfisempty()
.br
.RS
checks whether all bit of an array are unset
.RE
.LP
.B
bfnormalize()
.br
.RS
represents a bitfield as a smallest value of a closed ring
.RE
.LP
.B
bfpopcount()
.br
.RS
counts the set bits in a bitfield
.RE
.LP
.B
bfpos()
.br
.RS
checks whether an array of bits contains a sub-array
.RE
.LP
.B
bfrev()
.br
.RS
reverses the order of bits in a bitfield and returns result in new bitfield
.RE
.LP
.B
bfrev_ip()
.br
.RS
reverses the order of bits in an existing bitfield
.RE
.LP
.B
bfsetall()
.br
.RS
sets all bits in a bitfield (i.e. fills it with ones)
.RE
.LP
.B
bfshift()
.br
.RS
circular-shifts the contents of a bitfield and returns the result in new
bitfield
.RE
.LP
.B
bfshift_ip()
.br
.RS
circular-shifts the contents of an existing bitfield
.RE
.LP
.B
bfsub()
.br
.RS
extracts a sub-bitfield in a new bitfield
.RE
.LP
Operations with individual bits:
.LP
.B
bfgetbit()
.br
.RS
checks the state of a bit in a bitfield
.RE
.LP
.B
bfsetbit()
.br
.RS
sets one bit in a bitfield
.RE
.LP
.B
bfclearbit()
.br
.RS
clears one bit in a bitfield
.RE
.LP
.B
bftogglebit()
.br
.RS
toggles (i.e. reverses the state of) a bit in a bitfield
.RE
.LP
Printing bit arrays:
.LP
.B
bfprint_lsb()
.br
.RS
prints a bitfield as a series of ones and zeroes, left to right, the least
significant bit first
.RE
.LP
.B
bfprint_msb()
.br
.RS
prints a bitfield as a series of ones and zeroes, left to right, the most
significant bit first
.RE
.LP
Logical operations with bit arrays:
.LP
.B
bfand()
.br
.RS
performs bitwise AND over a pair of bitfields
.RE
.LP
.B
bfnot()
.br
.RS
reverses all bits in a bitfield and return the result in a new bitfield
.RE
.LP
.B
bfnot_ip()
.br
.RS
reverses all bits in an existing bitfield
.RE
.LP
.B
bfor()
.br
.RS
performs bitwise inclusive OR over a pair of bitfields
.RE
.LP
.B
bfxor()
.br
.RS
performs bitwise exclusive OR over a pair of bitfields
.RE
.LP
.B
bfcmp()
.br
.RS
compares two bitfields and returns 0 if same or non-zero and error
message if different
.RE
.LP
Bitfield-to-something converters:
.LP
.B
bf2char()
.br
.RS
converts a bitfield structure into an array of unsigned chars
.RE
.LP
.B
bf2str()
.br
.RS
converts into a character string of '1's and '0's
.RE
.LP
.B
bf2short()
.br
.RS
converts into an array of short integers
.RE
.LP
.B
bf2int()
.br
.RS
converts into an array of integers
.RE
.LP
.B
bf2long()
.br
.RS
converts into an array of long integers
.RE
.LP
.B
bf2ll()
.br
.RS
converts into an array of long long integers
.RE
.LP
.B
bftouint8()
.br
.RS
converts into an array of uint8_t
.RE
.LP
.B
bftouint16()
.br
.RS
converts into an array of uint16_t
.RE
.LP
.B
bftouint32()
.br
.RS
converts into an array of uint32_t
.RE
.LP
.B
bftouint64()
.br
.RS
converts into an array of uin64_t
.RE
.LP
"In-place" bitfield-to-something converters are same as above, except that
instead of creating a new array, these functions fill an existing one:
.LP
.B
bf2char_ip()
.RE
.LP
.B
bf2str_ip()
.RE
.LP
.B
bf2short_ip()
.RE
.LP
.B
bf2int_ip()
.RE
.LP
.B
bf2long_ip()
.RE
.LP
.B
bf2ll_ip()
.RE
.LP
.B
bftouint8_ip()
.RE
.LP
.B
bftouint16_ip()
.RE
.LP
.B
bftouint32_ip()
.RE
.LP
.B
bftouint64_ip()
.RE
.LP
Something-to-bitfield converters:
.LP
.B
char2bf()
.br
.RS
converts an array of unsigned chars into a bitfield structure
.RE
.LP
.B
str2bf()
.br
.RS
converts a character string of '1's and '0's
.RE
.LP
.B
short2bf()
.br
.RS
converts an array of short integers
.RE
.LP
.B
int2bf()
.br
.RS
converts an array of integers
.RE
.LP
.B
long2bf()
.br
.RS
converts an array of long integers
.RE
.LP
.B
ll2bf()
.br
.RS
converts an array of long long integers
.RE
.LP
.B
uint8tobf()
.br
.RS
converts an array of uint8_t
.RE
.LP
.B
uint16tobf()
.br
.RS
converts an array of uint16_t
.RE
.LP
.B
uint32tobf()
.br
.RS
converts an array of uint32_t
.RE
.LP
.B
uint64tobf()
.br
.RS
converts an array of uint64_t
.RE
.LP
"In-place" something-to-bitfield converters are same as above, except that
instead of creating a new bitfield, these functions fill an existing one:
.LP
.B
char2bf_ip()
.RE
.LP
.B
str2bf_ip()
.RE
.LP
.B
short2bf_ip()
.RE
.LP
.B
int2bf_ip()
.RE
.LP
.B
long2bf_ip()
.RE
.LP
.B
ll2bf_ip()
.RE
.LP
.B
uint8tobf_ip()
.RE
.LP
.B
uint16tobf_ip()
.RE
.LP
.B
uint32tobf_ip()
.RE
.LP
.B
uint64tobf_ip()
.RE
.LP
Miscellaneous:
.LP
.B
bfsize()
.br
.RS
.LP
obtains the number of bits of a bitfield
.RE
.SH AUTHOR
Vitalie CIUBOTARU
